{"version":3,"sources":["shared/images/profile.png","shared/images/github.svg","shared/images/reddit.svg","components/Home/Home.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","class","src","profile","className","alt","href","rel","target","style","marginLeft","fontSize","padding","github","reddit","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qHAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,uQC4C5BC,G,uLApCP,OAII,6BACI,yBAAKC,MAAM,YACP,yBAAKC,IAAKC,IAASC,UAAU,gBAAgBC,IAAI,YACjD,6CAAkB,6BAAlB,iEACkE,6BADlE,iEAKJ,0BAAMC,KAAK,iDAAiDC,IAAI,eAEhE,uBAAGH,UAAU,aAAaI,OAAO,SAASD,IAAI,sBAAsBD,KAAK,uCACrE,yBAAKJ,IAAI,4DAA4DG,IAAI,oBACzE,0BAAMI,MAAO,CAAEC,WAAY,OAAQC,SAAU,oBAA7C,oBACJ,yBAAKV,MAAM,YACP,yCACA,uBAAGK,KAAK,8EAA8EG,MAAO,CAAEG,QAAS,SACpG,yBAAKV,IAAI,8GAA8GG,IAAI,iBAC/H,uBAAGC,KAAK,6EAA6EG,MAAO,CAAEG,QAAS,SACnG,yBAAKV,IAAI,6GAA6GG,IAAI,iBAElI,yBAAKJ,MAAM,YACP,uBAAGK,KAAK,+BAA+BE,OAAO,SAASD,IAAI,uBACvD,yBAAKL,IAAKW,IAAQT,UAAU,UAAUC,IAAI,YAC9C,uBAAGC,KAAK,oCAAoCE,OAAO,SAASD,IAAI,uBAC5D,yBAAKL,IAAKY,IAAQV,UAAU,UAAUC,IAAI,kB,GA9B/CU,cCeJC,MAjBf,WACE,OACE,yBAAKZ,UAAU,OACb,4BAAQA,UAAU,cAQhB,kBAAC,EAAD,SCHYa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8aeaaf80.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.ab8abd3a.png\";","module.exports = __webpack_public_path__ + \"static/media/github.617870e4.svg\";","module.exports = __webpack_public_path__ + \"static/media/reddit.4c55d0f2.svg\";","import React, { Component } from 'react';\nimport profile from \"../../shared/images/profile.png\";\nimport github from \"../../shared/images/github.svg\";\nimport reddit from \"../../shared/images/reddit.svg\"\n\nimport './Home.css';\nclass Home extends Component {\n    render() {\n        return (\n            // <a href=\"https://play.google.com/store/apps/developer?id=Gumboy&hl=en\">\n            //     Play Store Apps\n            // </a>\n            <div>\n                <div class=\"col-auto\">\n                    <img src={profile} className=\"profile-image\" alt=\"profile\"></img>\n                    <h2>Hi, I'm Gumboy<br /> \n                        Software Engineer pursuing a career in Application Development<br />\n                        A few of my interests are video games, drawing, and politics\n                    </h2>\n                </div>\n                <link href=\"https://fonts.googleapis.com/css?family=Cookie\" rel=\"stylesheet\"></link>\n\n                <a className=\"bmc-button\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.buymeacoffee.com/gumboy\">\n                    <img src=\"https://cdn.buymeacoffee.com/buttons/bmc-new-btn-logo.svg\" alt=\"Buy me a coffee\"></img>\n                    <span style={{ marginLeft: '15px', fontSize: '28px !important' }}>Buy me a coffee</span></a>\n                <div class=\"col-auto\">\n                    <h2> Projects</h2>\n                    <a href=\"https://play.google.com/store/apps/details?id=com.gumboy.random_facts&hl=en\" style={{ padding: '15px' }}>\n                        <img src=\"https://lh3.googleusercontent.com/SRsm6Qq4wOjYlxY4hqjWrsSkxtCaxGYz4q9BeUc0RD-gVNt6NSoOi-m3h0tlckcRA_gz=s180\" alt=\"randomFacts\" ></img></a>\n                    <a href=\"https://play.google.com/store/apps/details?id=com.gumboy.timer_watch&hl=en\" style={{ padding: '15px' }}>\n                        <img src=\"https://lh3.googleusercontent.com/R_gOe_Qod7JVCPCV_WVv1sRwpxiJYqT0SbFX8nrHjZi7TSA3iQYYSi-vmtVqT4HL2Gc=s180\" alt=\"timerWatch\" ></img></a>\n                </div>\n                <div class=\"col-auto\">\n                    <a href=\"https://github.com/Gumboyrbz\" target=\"_blank\" rel=\"noopener noreferrer\">\n                        <img src={github} className=\"row-img\" alt=\"github\"></img></a>\n                    <a href=\"https://reddit.com/user/Gumboyrbz\" target=\"_blank\" rel=\"noopener noreferrer\">\n                        <img src={reddit} className=\"row-img\" alt=\"reddit\"></img>\n                    </a>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n// https://lh3.googleusercontent.com/SRsm6Qq4wOjYlxY4hqjWrsSkxtCaxGYz4q9BeUc0RD-gVNt6NSoOi-m3h0tlckcRA_gz=s180","import React from \"react\";\n\nimport \"./App.css\";\nimport Home from \"./Home/Home\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img src={profile} className=\"profile-image\"></img>\n        \n          <link href=\"https://fonts.googleapis.com/css?family=Cookie\" rel=\"stylesheet\"></link>\n            <a className=\"bmc-button\" target=\"_blank\" href=\"https://www.buymeacoffee.com/gumboy\">\n              <img src=\"https://cdn.buymeacoffee.com/buttons/bmc-new-btn-logo.svg\" alt=\"Buy me a coffee\"></img>\n                <span style={{marginLeft:'15px',fontSize:'28px !important'}}>Buy me a coffee</span></a> */}\n\n        <Home />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}